---
#
# Runs NodeVertical test
#

- name: Runs NodeVertical on a RHCOS cluster
  hosts: orchestration
  gather_facts: true
  remote_user: "{{orchestration_user}}"
  vars_files:
    - vars/nodevertical.yml
  vars:
    workload_job: "nodevertical"
  tasks:
    - name: Create scale-ci-tooling directory
      file:
        path: "{{ansible_user_dir}}/scale-ci-tooling"
        state: directory

    - name: Copy workload files
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
      with_items:
        - src: scale-ci-tooling-ns.yml
          dest: "{{ansible_user_dir}}/scale-ci-tooling/scale-ci-tooling-ns.yml"
        - src: workload-nodevertical-script-cm.yml
          dest: "{{ansible_user_dir}}/scale-ci-tooling/workload-nodevertical-script-cm.yml"

    - name: Slurp kubeconfig file
      slurp:
        src: "{{kubeconfig_file}}"
      register: kubeconfig_file_slurp

    - name: Slurp ssh private key file
      slurp:
        src: "{{pbench_ssh_private_key_file}}"
      register: pbench_ssh_private_key_file_slurp

    - name: Slurp ssh public key file
      slurp:
        src: "{{pbench_ssh_public_key_file}}"
      register: pbench_ssh_public_key_file_slurp

    - name: nodevertical labeling
      openshift_client_python:
        script: |
          nvc = {{nodevertical_node_count|int}}
          remaining_count = nvc
          if {{enable_pbench_agents|bool}}:
              # Remove nodevertical label on any node
              oc.selector('nodes').label({'nodevertical': None})
              # Label up to the first 2 pbench nodes
              label_pbench_count = min(2, nvc)
              # Build selector for all agent nodes
              pbench_nodes_sel = oc.selector('nodes', labels={'pbench_agent': 'true', 'node-role.kubernetes.io/worker': ''})
              # Select up the first two and label them
              pbench_nodes_sel.subset(0, label_pbench_count).label({'nodevertical': 'true'})
              # Store how many more we need
              remaining_count -= label_pbench_count

          # Hit desired count by labeling non-agents
          oc.selector('nodes', labels={'!pbench_agent': 'true', 'node-role.kubernetes.io/worker': ''}).subset(0, remaining_count).label({'nodevertical': 'true'})

    - name: Calculate maximum pods to fit in nodevertical labeled space
      openshift_client_python:
        script: |
          total_pod_count = 0
          for node_apiobj in oc.selector('nodes', labels={'nodeveritical': 'true'}).objects():
              for pod_apiobj in node_apiobj.related('pods').objects():
                  if pod_apiobj.model.status.phase in ['Running', 'Pending']:
                      total_pod_count += 1
          oc.ansible.new_facts['total_pod_count'] = total_pod_count

    - name: Template workload templates
      template:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
      with_items:
        - src: pbench-cm.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/pbench-cm.yml"
        - src: pbench-ssh-secret.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/pbench-ssh-secret.yml"
        - src: kubeconfig-secret.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/kubeconfig-secret.yml"
        - src: workload-job.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/workload-job.yml"
        - src: workload-env.yml.j2
          dest: "{{ansible_user_dir}}/scale-ci-tooling/workload-nodevertical-env.yml"

    - name: Check if scale-ci-tooling namespace exists
      shell: |
        oc get project scale-ci-tooling
      ignore_errors: true
      changed_when: false
      register: scale_ci_tooling_ns_exists

    - name: Ensure any stale scale-ci-nodevertical job is deleted
      openshift_client_python:
        script: |
          with oc.new_project('scale-ci-tooling', ok_if_exists=True):
              if oc.selector('sa/useroot').count_existing() == 0:
                oc.invoke('create', cmd_args=['serviceaccount', 'useroot'])
                oc.invoke('adm', cmd_args=['policy', 'add-scc-to-user', 'privileged', '-z=useroot'])

              oc.selector('job/scale-ci-nodevertical').delete(ignore_not_found=True)

    - name: Replace resources
      openshift_client_python:
        project: scale-ci-tooling
        timeout: 60
        script: |
          files = [
              "{{ansible_user_dir}}/scale-ci-tooling/kubeconfig-secret.yml",
              "{{ansible_user_dir}}/scale-ci-tooling/pbench-cm.yml",
              "{{ansible_user_dir}}/scale-ci-tooling/pbench-ssh-secret.yml",
              "{{ansible_user_dir}}/scale-ci-tooling/workload-nodevertical-script-cm.yml",
              "{{ansible_user_dir}}/scale-ci-tooling/workload-nodevertical-env.yml",
              "{{ansible_user_dir}}/scale-ci-tooling/workload-job.yml",
          ]

          for filename in files:
              with open(filename, 'r') as f:
                  oc.replace(f.read(), force=True)

    - name: Poll until job pod is running
      openshift_client_python:
        project: scale-ci-tooling
        timeout: 120
        script: |
          oc.selector('pod', labels={'job': 'scale-ci-nodevertical'}).until_all(1, oc.status.is_pod_running)

    - name: Poll until job is complete
      openshift_client_python:
        project: scale-ci-tooling
        timeout: 120
        script: |
          oc.selector('job/scale-ci-nodevertical').until_all(1,
                                                             success_func=lambda job: job.model.status.succeeded == 1,
                                                             failure_func=lambda job: job.model.status.failed == 1,
                                                             auto_raise=True
                                                             )
